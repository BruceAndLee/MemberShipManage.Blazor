@page "/customer/list"
@using MemberShipManage.Shared.CustomerDTO
@using MemberShipManage.Infrastructurer
@using MemberShipManage.Infrastructurer.Extension

@inherits MemberShipManage.Client.Pages.Common.ToastPage
@inject HttpClient Http
@inject DialogService DialogService
@inject NavigationManager NavigationManager

<div id="customerlist">
    <GroupBox Title="查询">
        <div class="row" style="height:40px;line-height:35px">
            <div class="col-md-1">
                <label class="control-label">用户名：</label>
            </div>
            <div class="col-md-2">
                <BootstrapInput TValue="string" @bind-Value="request.UserNo" placeholder=""></BootstrapInput>
            </div>
            <div class="col-md-1">
                <label class="control-label">姓名：</label>
            </div>
            <div class="col-md-2">
                <BootstrapInput TValue="string" @bind-Value="request.Name" placeholder=""></BootstrapInput>
            </div>
            <div class="col-md-1">
                <label class="control-label">性别：</label>
            </div>
            <div class="col-md-2">
                <Select @bind-Value="@request.Sex">
                    <Options>
                        <SelectOption Text="---全部---" Value="" />
                        <SelectOption Text="男" Value="1" />
                        <SelectOption Text="女" Value="0" />
                    </Options>
                </Select>
            </div>
            <div class="col-md-3 text-right">
                <Button Color="Color.Primary" @onclick="()=> SearchCustomerList(new QueryPageOptions {PageIndex=0,PageItems=PageItemCount })">查询</Button>
                <Button Color="Color.Secondary" @onclick="()=> SearchCustomerList(new QueryPageOptions {PageIndex=0,PageItems=PageItemCount })">重置</Button>
            </div>
        </div>
    </GroupBox>
    <div class="margin-t5">
        <Table TItem="CustomerDetailEntity"
               IsPagination="false"
               Items="CustomerGetResponse.CustomerDetailList"
               IsStriped="true"
               IsBordered="true"
               ShowToolbar="true"
               ShowLineNo="true"
               LineNoText="序号"
               ShowDefaultButtons="false"
               ShowExtendButtons="true"
               ShowRefresh="false"
               IsMultipleSelect="true"
               ExtendButtonColumnWidth="80"
               @bind-SelectedRows="@SelectedRows"
               ShowExportButton="true">
            <TableToolbarTemplate>
                <TableToolbarButton TItem="CustomerDetailEntity"
                                    Color="Color.Primary"
                                    Icon="fa fa-fw fa-edit"
                                    Text="新增"
                                    OnClickCallback="@OnAddButtonClick" />
            </TableToolbarTemplate>
            <TableColumns Context="customer">
                <TableColumn @bind-Field="@customer.UserNo" Text="用户名" Width="180" Sortable="true" Filterable="true" />
                <TableColumn @bind-Field="@customer.Name" Text="姓名" Width="120" />
                <TableColumn @bind-Field="@customer.Sex" Text="性别" Width="80">
                    <Template Context="value">
                        <span>@(value.Value==1? "男":"女")</span>
                    </Template>
                </TableColumn>
                <TableColumn @bind-Field="@customer.Amount" Text="余额" Width="150" />
                <TableColumn @bind-Field="@customer.ParentCustomerName" Text="推荐人" Width="80" />
                <TableColumn @bind-Field="@customer.InDate" Text="注册日期" Width="150">
                    <Template Context="value">
                        <span>@value.Value.GetValueOrDefault(DateTime.Now).ToString("yyyy-MM-dd hh:mm:ss")</span>
                    </Template>
                </TableColumn>
            </TableColumns>
            <RowButtonTemplate>
                <TableCellButton Size="Size.ExtraSmall"
                                 Color="Color.Success"
                                 TItem="CustomerDetailEntity"
                                 Item="@context"
                                 Icon="fa fa-edit"
                                 Text="编辑"
                                 OnClickCallback="@OnEditButtonClick" />
                <TableCellButton Size="Size.ExtraSmall"
                                 Color="Color.Danger"
                                 TItem="CustomerDetailEntity"
                                 Item="@context"
                                 Icon="fa fa-cross"
                                 Text="删除"
                                 OnClickCallback="@OnDeleteButtonClick" />
            </RowButtonTemplate>
        </Table>
        <Pagination PageItems="@PageItemCount"
                    PageItemsSource="@PageItems"
                    TotalCount="@CustomerGetResponse.TotalCount"
                    OnPageClick="@OnPageClick"
                    OnPageItemsChanged="@OnPageItemsChanged">
        </Pagination>
    </div>
</div>
@code {
    private EditContext editContext;
    private CustomerGetRequest request = new CustomerGetRequest();
    private CustomerGetResponse CustomerGetResponse = new CustomerGetResponse { CustomerDetailList = new List<CustomerDetailEntity>() };
    private IEnumerable<CustomerDetailEntity> SelectedRows = new List<CustomerDetailEntity>();
    private CustomerUpdateRequest CurrentCustomer { get; set; }
    private IEnumerable<int> PageItems => new int[] { 10, 20, 50, 100 };
    private int PageItemCount { get; set; }

    protected async override void OnInitialized()
    {
        base.OnInitialized();
        PageItemCount = PageItems.First();
        editContext = new EditContext(request);
        await this.SearchCustomerList(new QueryPageOptions { PageIndex = 0, PageItems = PageItemCount });
    }

    private async Task SearchCustomerList(QueryPageOptions options)
    {
        var url = BuildRequestUrl(options).Result;
        CustomerGetResponse = await Http.GetFromJsonAsync<CustomerGetResponse>(url);
        StateHasChanged();
    }

    private async Task<string> BuildRequestUrl(QueryPageOptions options)
    {
        var url = APIUrlDefination.CUSTOMER_GET + "?";
        var criteria = string.Empty;
        EnsureCondition.RunIf(!string.IsNullOrEmpty(request.Name), () => criteria = string.Concat(criteria, $"&name={request.Name.Trim()}"));
        EnsureCondition.RunIf(!string.IsNullOrEmpty(request.UserNo), () => criteria = string.Concat(criteria, $"&userno={request.UserNo.Trim()}"));
        EnsureCondition.RunIf(request.Sex.HasValue, () => criteria = string.Concat(criteria, $"&sex={request.Sex}"));
        criteria = string.Concat(criteria, $"&pageindex={options.PageIndex}&pagesize={options.PageItems}");
        criteria = criteria.TrimStart('&');
        url = string.Concat(url, criteria);

        return await Task.FromResult(url);
    }

    private async Task OnPageClick(int pageIndex, int pageItems)
    {
        await this.SearchCustomerList(new QueryPageOptions { PageIndex = pageIndex, PageItems = pageItems });
    }

    private async Task OnPageItemsChanged(int pageItems)
    {
        await this.SearchCustomerList(new QueryPageOptions { PageIndex = 0, PageItems = pageItems });
    }

    protected Task OnAddButtonClick(IEnumerable<CustomerDetailEntity> items)
    {
        NavigationManager.NavigateTo("customer/create");
        return Task.CompletedTask;
    }

    protected Task OnEditButtonClick(CustomerDetailEntity customer)
    {
        var customerUpdateRequest = new CustomerUpdateRequest
        {
            ID = customer.Id,
            Name = customer.Name,
            Sex = customer.Sex,
            UserNo = customer.UserNo,
            ParentID = customer.ParentID
        };

        var option = new ResultDialogOption()
        {
            Title = "编辑",
            IsCentered = true,
            ShowCloseButton = true,
            BodyTemplate = DynamicComponent.CreateComponent<CustomerEdit>(new KeyValuePair<string, object>[]
                {
            new KeyValuePair<string, object>("CustomerUpdateRequest",customerUpdateRequest)
                }).Render(),
            OnCloseAsync = async () =>
          {
              await SearchCustomerList(new QueryPageOptions { PageIndex = 0, PageItems = PageItemCount });
          }
        };
        DialogService.Show(option);
        return Task.CompletedTask;
    }

    protected Task OnDeleteButtonClick(CustomerDetailEntity items)
    {
        this.ShowToast("请选择要删除的数据", "消息通知");
        return Task.CompletedTask;
    }
}

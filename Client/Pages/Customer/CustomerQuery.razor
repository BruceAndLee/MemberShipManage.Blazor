@page "/customer/list"
@using MemberShipManage.Shared.CustomerDTO
@using MemberShipManage.Infrastructurer
@using MemberShipManage.Infrastructurer.Extension
@inject HttpClient Http

<EditForm Model="@request">
    <div id="customer" class="margin-t10">
        <div class="panel panel-primary">
            <div class="panel-heading">
                <h3 class="panel-title">
                    <label>会员管理</label>
                </h3>
            </div>
            <div class="panel-content padding-5">
                <div class="row">
                    <label class="col-md-1">用户名：</label>
                    <div class="col-md-3">
                        <InputText type="text" id="userno" @bind-Value="request.UserNo" class="form-control" maxlength="20" autocomplete="off" />
                    </div>
                    <label class="col-md-1">姓名：</label>
                    <div class="col-md-2">
                        <InputText type="text" id="name" @bind-Value="request.Name" class="form-control" maxlength="20" autocomplete="off" />
                    </div>
                    <label class="col-md-1">性别：</label>
                    <div class="col-md-2">
                        <InputSelect class="form-control" id="sex" @bind-Value="request.Sex">
                            <option value="">---全部---</option>
                            <option value="1">男</option>
                            <option value="0">女</option>
                        </InputSelect>
                    </div>
                    <div class="col-md-1">
                        <button id="search" type="button" @onclick="(() => SearchCustomerList(new QueryPageOptions { PageIndex=0 }))" class="btn btn-primary">查询</button>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div id="customerlist" class="margin-t10">
                            <Table TItem="CustomerDetailEntity"
                                   IsPagination="true"
                                   PageItemsSource="@PageItemsSource"
                                   IsStriped="true"
                                   IsBordered="true"
                                   ShowToolbar="true"
                                   ShowLineNo="true"
                                   LineNoText="序号"
                                   DoubleClickToEdit="true"
                                   ShowEditButton="false"
                                   IsMultipleSelect="true"
                                   @bind-SelectedRows="@SelectedRows"
                                   
                                   ShowExportButton="true"
                                
                                   ShowSearch="true" ShowAdvancedSearch="true"
                                   ShowDefaultButtons="true"
                                   AddModalTitle="增加测试数据窗口"
                                   EditModalTitle="编辑测试数据窗口"
                                   OnQueryAsync="OnQueryAsync"
                                   OnAddAsync="@OnAddAsync"
                                   OnSaveAsync="@OnSaveAsync">
                                <TableColumns Context="customer">
                                    <TableColumn @bind-Field="@customer.UserNo" Text="用户名" Width="180" Sortable="true" Filterable="true" />
                                    <TableColumn @bind-Field="@customer.Name" Text="姓名" Width="120" />
                                    <TableColumn @bind-Field="@customer.Sex" Text="性别" Width="80" />
                                    <TableColumn @bind-Field="@customer.Amount" Text="余额" Width="150" />
                                    <TableColumn @bind-Field="@customer.ParentCustomerName" Text="推荐人" Width="80" />
                                    <TableColumn @bind-Field="@customer.InDate" Text="注册日期" Width="150">
                                        <Template Context="value">
                                            <span>@value.Value.GetValueOrDefault(DateTime.Now).ToString("yyyy-MM-dd hh:mm:ss")</span>
                                        </Template>
                                    </TableColumn>
                                </TableColumns>
                                <EditTemplate Context="edit">
                                    <div class="form-inline">
                                        <div class="row">
                                            <div class="form-group col-12 col-sm-6">
                                                <BootstrapInput @bind-Value="@edit.Name" placeholder="不可为空，50字以内" maxlength="50">
                                                    <RequiredValidator />
                                                    <StringLengthValidator Length="50" />
                                                </BootstrapInput>
                                            </div>
                                        </div>
                                    </div>
                                </EditTemplate>
                                <SearchTemplate Context="search">
                                    <div class="form-inline">
                                        <div class="row">
                                            <div class="form-group col-12 col-sm-6">
                                                <BootstrapInput @bind-Value="@search.Name" placeholder="不可为空，50字以内" maxlength="50" ShowLabel="true" DisplayText="姓名" />
                                            </div>
                                            <div class="form-group col-12 col-sm-6">
                                                <BootstrapInput @bind-Value="@search.UserNo" placeholder="不可为空，50字以内" maxlength="50" ShowLabel="true" DisplayText="地址" />
                                            </div>
                                        </div>
                                    </div>
                                </SearchTemplate>
                            </Table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>
@code {
    private EditContext editContext;
    private CustomerGetRequest request = new CustomerGetRequest();
    private CustomerGetResponse CustomerGetResponse { get; set; }
    protected static IEnumerable<int> PageItemsSource => new int[] { 10, 20, 50, 100 };
    private IEnumerable<CustomerDetailEntity> SelectedRows = new List<CustomerDetailEntity>();

    protected async Task<QueryData<CustomerDetailEntity>> OnQueryAsync(QueryPageOptions options)
    {
        await SearchCustomerList(options);
        return Task.FromResult(new QueryData<CustomerDetailEntity>()
        {
            Items = CustomerGetResponse.CustomerDetailList,
            TotalCount = CustomerGetResponse.TotalCount
        }).Result;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        editContext = new EditContext(request);
    }

    private async Task SearchCustomerList(QueryPageOptions options)
    {
        var url = BuildRequestUrl(options).Result;
        CustomerGetResponse = await Http.GetFromJsonAsync<CustomerGetResponse>(url);
    }

    private async Task<string> BuildRequestUrl(QueryPageOptions options)
    {
        var url = APIUrlDefination.CUSTOMER_GET + "?";
        var criteria = string.Empty;
        EnsureCondition.RunIf(!string.IsNullOrEmpty(request.UserNo), () => criteria = string.Concat(criteria, $"&userno={request.UserNo.Trim()}"));
        EnsureCondition.RunIf(!string.IsNullOrEmpty(request.Name), () => criteria = string.Concat(criteria, $"&userno={request.Name.Trim()}"));
        EnsureCondition.RunIf(request.Sex.HasValue, () => criteria = string.Concat(criteria, $"&sex={request.Sex}"));
        criteria = string.Concat(criteria, $"&pageindex={options.PageIndex}&pagesize={options.PageItems}");
        criteria = criteria.TrimStart('&');
        url = string.Concat(url, criteria);

        return await Task.FromResult(url);
    }

    protected static Task<CustomerDetailEntity> OnAddAsync()
    {
        return Task.FromResult(new CustomerDetailEntity() { InDate = DateTime.Now });
    }

    protected Task<bool> OnSaveAsync(CustomerDetailEntity item)
    {
        
        return Task.FromResult(true);
    }
}

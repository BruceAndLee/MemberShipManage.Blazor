@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using MemberShipManage.Infrastructure.Utility
@using System.Net
@using MemberShipManage.Infrastructurer.Extension

@code {

    private const string USER_Auth_KEY = "Authorization";
    protected const string CLIENT_ID = "membership_19861017";
    #region Post
    public async Task<HttpResponseMessage> Post(string url, HttpContent content)
    {
        await AppendAuthorization();
        return await Http.PostAsync(url, content);
    }

    public async Task<HttpResponseMessage> PostAsJson<T>(string url, T request) where T : class, new()
    {
        await AppendAuthorization();
        return await Http.PostAsJsonAsync<T>(url, request);
    }

    public async Task<HttpResponseMessage> PostWithHeader(
         string url
        , HttpContent content
        , Dictionary<string, IEnumerable<string>> headerKeyValues = null
        , bool forceUpdate = false)
    {
        await AppendAuthorization();
        ProcessHeaders(headerKeyValues, forceUpdate);
        return await Http.PostAsync(url, content);
    }

    #endregion

    #region Put

    public async Task<HttpResponseMessage> Put(string url, HttpContent content)
    {
        await AppendAuthorization();
        return await Http.PutAsync(url, content);
    }

    public async Task<HttpResponseMessage> PutAsJson<T>(string url, T request) where T : class, new()
    {
        await AppendAuthorization();
        return await Http.PutAsJsonAsync<T>(url, request);
    }

    public async Task<HttpResponseMessage> PutWithHeader(
        string url
        , HttpContent content
        , Dictionary<string, IEnumerable<string>> headerKeyValues = null
        , bool forceUpdate = false)
    {
        await AppendAuthorization();
        ProcessHeaders(headerKeyValues, forceUpdate);
        return await Http.PutAsync(url, content);
    }

    #endregion

    private void ProcessHeaders(
    Dictionary<string, IEnumerable<string>> headerKeyValues = null
    , bool forceUpdate = false)
    {
        if (headerKeyValues != null && headerKeyValues.Count > 0)
        {
            foreach (KeyValuePair<string, IEnumerable<string>> header in headerKeyValues)
            {
                EnsureCondition.RunIf(Http.DefaultRequestHeaders.Contains(header.Key), () =>
                {
                    if (forceUpdate)
                    {
                        Http.DefaultRequestHeaders.Remove(header.Key);
                        Http.DefaultRequestHeaders.Add(header.Key, header.Value);
                    }
                }, () =>
                {
                    Http.DefaultRequestHeaders.Add(header.Key, header.Value);
                });
            }
        }
    }

    protected void CheckAuthorization(HttpResponseMessage response, Action action = null)
    {
        EnsureCondition.RunIf(response.StatusCode == HttpStatusCode.Unauthorized
            , () =>
            {
                Navigation.NavigateTo("/system/login");
            }
            , () =>
            {
                action?.Invoke();
            });
    }

    private async Task AppendAuthorization()
    {
        var token = await JSRuntime.GetLocalStorage("access_token");
        if (!string.IsNullOrEmpty(token))
        {
            var tokenResult = token.DeserializeFromJson<MemberShipManage.Shared.TokenResult>();
            var tokenDictionary = new Dictionary<string, IEnumerable<string>>();
            tokenDictionary.Add(USER_Auth_KEY, new List<string> { tokenResult?.Access_token });
            ProcessHeaders(tokenDictionary);
        }
    }
}

@page  "/system/login"
@using MemberShipManage.Shared.UserDTO
@using MemberShipManage.Infrastructurer
@using System.Net
@using MemberShipManage.Shared
@using MemberShipManage.Infrastructure.Utility
@using MemberShipManage.Infrastructurer.Extension
@inherits MemberShipManage.Client.Pages.Common.ToastPage
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<Card Color="Color.None" Class="ml-3  mt-2" style="width: 30rem;">
    <CardHeader>
        <b>会员登录</b>
    </CardHeader>
    <CardBody>
        <EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
            <div class="row">
                <div class="col-md-3">
                    <label class="control-label">用户名：</label>
                </div>
                <div class="col-md-8">
                    <input type="text" @bind-value="@userEntity.UserNo" class="form-control" placeholder="请输入用户名" />
                    <ValidationMessage For="()=>userEntity.UserNo"></ValidationMessage>
                </div>
            </div>
            <div class="margin-t10"></div>
            <div class="row">
                <div class="col-md-3">
                    <label class="control-label">密码：</label>
                </div>
                <div class="col-md-8">
                    <input type="password" @bind-value="userEntity.Password" class="form-control" placeholder="请输入密码" />
                    <ValidationMessage For="()=>userEntity.Password"></ValidationMessage>
                </div>
            </div>
            <div class="margin-t10"></div>
            <div class="row">
                <div class="col-md-3"></div>
                <div class="col-md-8">
                    <Button ButtonType="ButtonType.Submit" Color="Color.Primary">登录</Button>
                    <Button @onclick="@OnCancelButtonClick" Color="Color.Primary">取消</Button>
                </div>
            </div>
            <DataAnnotationsValidator />
        </EditForm>
    </CardBody>
</Card>
@code {
    private const string USER_CREDIT_HEADER = "user_credit";
    private UserEntity userEntity = new UserEntity();
    private EditContext editContext;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(userEntity);
    }

    private void OnCancelButtonClick(MouseEventArgs e)
    {

    }

    private async Task OnValidSubmit()
    {
        var userGetUrl = string.Format(APIUrlDefination.USER_GET, userEntity.UserNo, userEntity.Password);
        var response = await Http.GetAsync(userGetUrl);

        if (response.StatusCode == HttpStatusCode.NoContent)
        {
            ShowToast("用户名或者密码不正确！", "提示信息");
            return;
        }

        var userCredit = await response.Content.ReadFromJsonAsync<UserCreditEntity>();
        userCredit.ClientID = "membership_19861017";

        if (Http.DefaultRequestHeaders.Contains(USER_CREDIT_HEADER))
        {
            Http.DefaultRequestHeaders.Remove(USER_CREDIT_HEADER);
        }

        Http.DefaultRequestHeaders.Add(USER_CREDIT_HEADER, new List<string> { userCredit.ClientID, userCredit.UserNo, userCredit.Password });

        var tokenResult = await Http.PostAsync(APIUrlDefination.TOKEN_GENERATE, null);
        var tokenEntity = tokenResult.Content.ReadFromJsonAsync<TokenResult>();
        await JSRuntime.SetLocalStorage("login_user", tokenEntity.ToJson());
        await JSRuntime.InvokeVoidAsync("refresh");
    }
}
